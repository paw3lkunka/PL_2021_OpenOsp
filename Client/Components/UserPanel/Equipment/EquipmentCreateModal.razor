@using OpenOsp.Model.Dtos
@using OpenOsp.Client.Components.Forms
@using Humanizer
@inject HttpClient _http

<label @onclick="() => _isOpen = true" class="btn btn-accent modal-button">Add</label>
<input type="checkbox" id="member-create-modal" class="modal-toggle" @bind="_isOpen"/>
<div class="modal">
  <EditForm Model="@_createDto" OnValidSubmit="HandleCreate" class="modal-box">
    @if (showError) {
      <div class="alert alert-error">
        <div class="flex-1">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="w-6 h-6 mx-2 stroke-current"> 
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>                         
          </svg>
          <label>Could not create equipment... Try again later</label>
        </div>
      </div>
    }
    <h1 class="mb-5 text-center text-2xl font-bold">Create an equipment</h1>
    <DataAnnotationsValidator/>
    <LabeledInputText @bind-Value="_createDto.Brand"/>
    <LabeledInputText @bind-Value="_createDto.Model"/>
    <LabeledInputText @bind-Value="_createDto.RegistryNumber"/>
    <div class="modal-action">
      <button type="submit" class="@($"btn btn-primary {(isWaitingForResponse ? "loading" : string.Empty)}")" hidden="@isWaitingForResponse">Create</button>
      <label for="member-create-modal" class="btn" hidden="@isWaitingForResponse">Cancel</label>
    </div>
  </EditForm>
</div>

@code {

  [Parameter]
  public EventCallback OnCreateCallback { get; set; }

  private EquipmentCreateDto _createDto { get; set; } = new();
  
  private bool _isOpen { get; set; } = false;

  private bool showError = false;

  private bool isWaitingForResponse = false;

  private async Task HandleCreate() {
    showError = false;
    isWaitingForResponse = true;
    var result = await _http.PostAsJsonAsync("api/equipment", _createDto);
    isWaitingForResponse = false;
    if (result.IsSuccessStatusCode) {
      _isOpen = false;
      await OnCreateCallback.InvokeAsync();
    }
    else {
      showError = true;
      StateHasChanged();
    }
  }

  private void HandleCancel() {
    ResetForm();
    _isOpen = false;
  }

  private void ResetForm() {
    _createDto.Brand = String.Empty;
    _createDto.Model = String.Empty;
    _createDto.RegistryNumber = String.Empty;
  }

}