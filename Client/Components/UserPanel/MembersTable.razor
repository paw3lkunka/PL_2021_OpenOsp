@using OpenOsp.Model.Dtos
@using OpenOsp.Client.Components.UserPanel.Members
@using OpenOsp.Client.Components.Forms
@inject HttpClient _http

<div class="flex mb-5 justify-between">
  <div>
    <MemberCreateModal OnCreateCallback="UpdateTable"/>
    <span>
      <label for="delete-members-modal" class="btn btn-secondary" disabled="@(_checkedMembers.Count() == 0)">Delete</label>
      <input type="checkbox" id="delete-members-modal" class="modal-toggle" @bind="_isDeleteModalOpen">
      <div class="modal">
        <div class="modal-box">
          <h3 class="font-bold text-lg">Delete Members</h3>
          <p class="py-4">Are you sure you want to delete @_checkedMembers.Count() checked members?<br/> It is permanent.</p>
          <div class="modal-action">
            <button @onclick="HandleDelete" class="btn btn-error">Confirm</button>
            <label for="delete-members-modal" class="btn">Cancel</label>
          </div>
        </div>
      </div>
    </span>
  </div>
</div>
<div class="overflow-x-auto">
  <table class="table w-full">
    <thead>
    <tr>
      <th><!--TODO: Think of incorporating SelectAll checkbox and pagination sometime--></th>
      <th>First name</th>
      <th>Last name</th>
      <th>PESEL</th>
      <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var member in _members) {
      <CascadingValue Value=@member>
        <MemberRecord OnUpdateCallback="UpdateTable"/>
      </CascadingValue>
    }
    </tbody>
    <tfoot>
    </tfoot>
  </table>
</div>

@code {

  [CascadingParameter(Name = "CheckedMembers")]
  private IDictionary<int, string> _checkedMembers { get; set; }

  private IEnumerable<MemberReadDto> _members { get; set; } = new List<MemberReadDto>();

  private bool _isDeleteModalOpen = false;

  protected override async Task OnInitializedAsync() {
    await UpdateTable();
  }

  private async Task UpdateTable() {
    var result = await _http.GetFromJsonAsync<List<MemberReadDto>>("api/members");
    if (result is not default(List<MemberReadDto>)) {
      _members = result;
      StateHasChanged();
    }
  }

  private async Task HandleDelete() {
    foreach (var memberId in _checkedMembers.Keys) {
      var result = await _http.DeleteAsync($"api/Members/{memberId}");
      if (result.IsSuccessStatusCode) {
        _checkedMembers.Remove(memberId);
      }
    }
    await UpdateTable();
  }

}
