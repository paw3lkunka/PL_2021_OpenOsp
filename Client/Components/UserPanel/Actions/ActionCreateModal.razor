@using OpenOsp.Model.Dtos
@using OpenOsp.Client.Enums
@using OpenOsp.Client.Components.UserPanel.Actions.CreateModal
@inject HttpClient _http

<label @onclick="() => _isOpen = true" class="btn btn-accent modal-button">Add</label>
<input type="checkbox" class="modal-toggle" @bind="_isOpen"/>
<div class="modal">
  <div  class="modal-box">
    <div class="modal-action">
      <button @onclick="HandleClose" class="btn btn-circle btn-sm">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-6 h-6 stroke-current">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
    <h1 class="mb-5 text-center text-2xl font-bold">Update an action</h1>
    @if (showError) {
      <div class="alert alert-error">
        <div class="flex-1">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="w-6 h-6 mx-2 stroke-current"> 
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>                         
          </svg>
          <label>Could not create action... Try again later</label>
        </div>
      </div>
    }
    <ul class="w-full steps">
      <li data-content="B" class="@("step " + (_mode >= ActionModalMode.Basics ? "step-primary" : string.Empty))">Basics</li> 
      <li data-content="M" class="@("step " + (_mode >= ActionModalMode.Members ? "step-primary" : string.Empty))">Members</li> 
      <li data-content="E" class="@("step " + (_mode >= ActionModalMode.Equipment ? "step-primary" : string.Empty))">Equipment</li> 
    </ul>
    <EditForm Model="@_createDto">
      <DataAnnotationsValidator/>
      @switch (_mode) {
        case ActionModalMode.Basics:
          <ActionCreateBasics @bind-Mode="_mode" CreateDto="@_createDto"/>
          break;
        case ActionModalMode.Members:
          <ActionCreateMembersTable @bind-Mode="_mode" CreateDtos="@_createDto.Members"/>
          break;
        case ActionModalMode.Equipment:
          <ActionCreateEquipmentTable @bind-Mode="_mode" CreateDtos="@_createDto.Equipment" OnCreateCallback="HandleCreate" IsWaitingForResponse="isWaitingForResponse"/>
          break;
      }
    </EditForm>
  </div>
</div>

@code {

  [Parameter]
  public EventCallback OnCreateCallback { get; set; }
  
  private bool _isOpen { get; set; } = false;

  private ActionModalMode _mode { get; set; } = ActionModalMode.Basics;

  private ActionCreateDto _createDto { get; set; } = new();
  
  private bool showError = false;
  
  private bool isWaitingForResponse = false;

  protected override Task OnParametersSetAsync() {
    ResetForm();
    return base.OnParametersSetAsync();
  }

  private async Task HandleCreate() {
    showError = false;
    isWaitingForResponse = true;
    var result = await _http.PostAsJsonAsync("api/actions", _createDto);
    isWaitingForResponse = false;
    if (result.IsSuccessStatusCode) {
      await OnCreateCallback.InvokeAsync();
      HandleClose();
    }
    else {
      showError = true;
      StateHasChanged();
    }
  }

  private void HandleClose() {
    ResetForm();
    _mode = ActionModalMode.Basics;
    _isOpen = false;
  }

  private void ResetForm() {
    _createDto = new();
    _createDto.StartTime = DateTime.Now;
    _createDto.EndTime = _createDto.StartTime.Add(new TimeSpan(0, 30, 0));
    _createDto.Equipment = new List<ActionEquipmentCreateDto>();
    _createDto.Members = new List<ActionMemberCreateDto>();
  }

}